// ------------
// Named styles
// ------------

// H1-6: hn-hash, hn-close

@for $i from 1 through 6 {
  $marker: repeat-string($rmd-heading-sign, $i);
  #{rmd-selector(hn-hash)} {
    h#{$i}::before { content: $marker + " "; }
  }
  #{rmd-selector(hn-close)} {
    h#{$i}::after { content: " " + $marker; }
  }
}

// H1, H2: h1-underline, h2-underline

%hn-underline-common {
  display: table;
  overflow: hidden;
  position: relative;
  padding-bottom: $rmd-line;

  &::before {
    content: none;
  }

  &::after {
    position: absolute;
    bottom: 0;
    left: 0;
    height: $rmd-line;
    width: 100%;
    overflow: hidden;
    word-break: break-all;
    cursor: default;
  }
}

#{rmd-selector(h1-underline)} {
  h1 {
    @extend %hn-underline-common;
    &::after {
      content: repeat-string($rmd-h1-underline, 12);
    }
  }
}

#{rmd-selector(h2-underline)} {
  h2 {
    @extend %hn-underline-common;
    &::after {
      content: repeat-string($rmd-h2-underline, 12);
    }
  }
}

// EM: em-star, em-underscore 

#{rmd-selector(em-star)} {
  em::before, em::after { content: "*"; }
}

#{rmd-selector(em-underscore)} {
  em::before, em::after { content: "_"; }
}

// STRONG: strong-star, strong-underscore

#{rmd-selector(strong-star)} {
  strong::before, strong::after { content: "**"; }
}

#{rmd-selector(strong-underscore)} {
  strong::before, strong::after { content: "__"; }
}

// A: a-bracket, a-showurl

#{rmd-selector(a-bracket)} {
  a {
    &::before { content: "["; }
    &::after { content: "]"; }
  }
}

#{rmd-selector(a-showurl)} {
  a[href] {
    &::before { content: "["; }
    &::after {
      content: "](" attr(href) ")";
      word-break: break-all;
    }
  }
}

// UL: ul-star, ul-plus, ul-hyphen

#{rmd-selector(ul-star)} {
  ul > li::before { content: "*"; }
}
#{rmd-selector(ul-plus)} {
  ul > li::before { content: "+"; }
}
#{rmd-selector(ul-hyphen)} {
  ul > li::before { content: "-"; }
}

// PRE: pre-indent

#{rmd-selector(pre-indent)} {
  pre {
    margin-left: 4ch;
  }
}

// CODE: code-tick

#{rmd-selector(code-tick)} {
  :not(pre) > code::before,
  :not(pre) > code::after {
    content: "`";
    // Ticks are very thin, and rarely have a "bold" variant.
    // Trying to make them a bit easier to see.
    text-shadow: 0 1px;
  }
}

// CODE: code-fence, code-fence-wide, code-fence-class

#{rmd-selector(code-fence)} {
  pre > code {
    display: block;
  }
  pre > code::before,
  pre > code::after {
    position: relative;
    top: .3em;
    content: "```";
    display: block;
    width: 100%;
    height: $rmd-line;
    overflow: hidden;
    word-break: break-all;
    cursor: default;
  }
}

#{rmd-selector(code-fence-tilde)} {
  pre > code::before,
  pre > code::after {
    top: 0;
    content: "~~~";
  }
}

#{rmd-selector(code-fence-full)} {
  pre > code::before,
  pre > code::after {
    top: 0;
    content: repeat-string("~~~~~~~~~~", 12);
  }
}

// DEL: del-gfm

#{rmd-selector(del-gfm)} {
  del {
    text-decoration: none;
  }
  del::before,
  del::after {
    content: "~~";
  }
}

// HR: hr-center, hr-star, hr-hyphen

#{rmd-selector(hr-center)} {
  hr { text-align: center; }
}

#{rmd-selector(hr-star)} {
  hr::before { content: $rmd-hr-stars; }
}

#{rmd-selector(hr-hyphen)} {
  hr::before { content: $rmd-hr-hyphens; }
}

// TABLE: table-marker

#{rmd-selector(table-marker)} {
  table {
    margin-top: rmd-margin("table", "top");
    margin-bottom: rmd-margin("table", "bottom");
    border-collapse: collapse;
  }
  tr > * {
    min-width: 3ch;
    position: relative;
    padding: 0;
    text-align: inherit;
    vertical-align: top;
    font-weight: normal;
    border: none;
  }
  tr > * + * {
    padding-left: 3ch;
  }
  tr:first-child > th:not([scope="row"]) {
    padding-bottom: $rmd-line;
  }
  tr:first-child > th:not([scope="row"])::after {
    content: repeat-string("-----------", 10);
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    overflow: hidden;
    word-break: break-all;
    height: $rmd-line;
  }
  tr:first-child > * + th:not([scope="row"])::after {
    left: 3ch;
  }
  tr > * + *::before {
    content: repeat-string("|\A", 10);
    position: absolute;
    overflow: hidden;
    left: 1ch;
    top: 0;
    bottom: 0;
    white-space: pre;
  }
  th[scope="row"],
  tr + tr > th:first-child {
    padding-right: 1ch;
  }
  th[scope="row"]::after,
  tr + tr > th:first-child::after {
    position: absolute;
    right: -1ch;
    content: ":";
  }
}
